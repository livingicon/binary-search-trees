(()=>{class t{constructor(t){this.data=t,this.left=null,this.right=null}}function r(r){let l=function(t){return function(t){let r=[];return t.forEach(((e,l)=>{t.indexOf(e)==l&&r.push(e)})),r}(e(t))}(r);const n=(r,e=0,l=r.length-1)=>{if(e>l)return null;let i=parseInt((e+l)/2);var o=new t(r[i]);return o.left=n(r,e,i-1),o.right=n(r,i+1,l),o};return n(l)}function e(t){if(t.length<2)return t;{const r=e(t.slice(0,Math.floor(t.length/2))),l=e(t.slice(Math.floor(t.length/2),t.length)),n=[];for(;r.length>0||l.length>0;)0===r.length||l[0]<r[0]?n[n.length]=l.shift():n[n.length]=r.shift();return n}}function l(t,r="",e=!0){null!==t.right&&l(t.right,`${r}${e?"│   ":"    "}`,!1),console.log(`${r}${e?"└── ":"┌── "}${t.data}`),null!==t.left&&l(t.left,`${r}${e?"    ":"│   "}`,!0)}const n=new class{constructor(t){this.root=r(t)}insert(r,e=this.root){return null===e?e=new t(r):(e.data<r&&(e.right=this.insert(r,e.right)),e.data>r&&(e.left=this.insert(r,e.left)),e)}delete(t,r=this.root){if(null===r)return r;if(r.data<t)r.right=this.delete(t,r.right);else if(r.data>t)r.left=this.delete(t,r.left);else{if(null===r.left)return r.right;if(null===r.right)return r.left;r.data=function(t){let r=t.data;for(;null!==t.left;)r=t.left.data,t=t.left;return r}(r.right),r.right=this.delete(r.data,r.right)}return r}find(t,r=this.root){return void 0===t||r.data==t?r:r.data<t?this.find(t,r.right):r.data>t?this.find(t,r.left):void 0}levelOrder(t,r=this.root){const e=[];if(null===r)return;const l=[r];for(;0!=l.length;){let t=l.shift();e.push(t.data),t.left&&l.push(t.left),t.right&&l.push(t.right)}return t?e.map((r=>t(r))):e}inOrder(t,r=this.root,e=[]){if(null!==r)return this.inOrder(t,r.left,e),e.push(r.data),this.inOrder(t,r.right,e),t?e.map((r=>t(r))):e}preOrder(t,r=this.root,e=[]){if(null!==r)return e.push(r.data),this.preOrder(t,r.left,e),this.preOrder(t,r.right,e),t?e.map((r=>t(r))):e}postOrder(t,r=this.root,e=[]){if(null!==r)return this.postOrder(t,r.left,e),this.postOrder(t,r.right,e),e.push(r.data),t?e.map((r=>t(r))):e}height(t,r=this.find(t)){if(null===r)return-1;const e=this.height(t,r.left),l=this.height(t,r.right);return Math.max(e,l)+1}depth(t,r=this.root,e=0){return void 0===t?this.height():null!==r?r.data===t?e:r.data<t?this.depth(t,r.right,e+1):r.data>t?this.depth(t,r.left,e+1):void 0:void 0}isBalanced(t=this.root){let r=this.height(t.left.data)+1,e=this.height(t.right.data)+1;return Math.abs(r-e)>1?"not balanced":"balanced"}reBalance(){this.root=r(this.inOrder())}}((10,Array.from({length:10},(()=>Math.floor(100*Math.random())))));l(n.root),console.log(`This binary tree is currently ${n.isBalanced()}.`),console.log(`Level Order Array: ${n.levelOrder()}`),console.log(`PreOrder Array: ${n.preOrder()}`),console.log(`PostOrder Array: ${n.postOrder()}`),console.log(`InOrder Array: ${n.inOrder()}`),((t=100,r=1e3)=>{for(let e=0;e<5;e++)n.insert(Math.floor(Math.random()*(r-t+1))+t)})(),l(n.root),console.log(`This binary tree is currently ${n.isBalanced()}.`),n.reBalance(n),l(n.root),console.log(`This binary tree is currently ${n.isBalanced()}.`),console.log(`Level Order Array: ${n.levelOrder()}`),console.log(`PreOrder Array: ${n.preOrder()}`),console.log(`PostOrder Array: ${n.postOrder()}`),console.log(`InOrder Array: ${n.inOrder()}`)})();